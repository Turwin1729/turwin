import React, { useState, useEffect } from 'react';
import ReactFlow, {
  Background
} from 'reactflow';
import 'reactflow/dist/style.css';
import styled from 'styled-components';

const PageContainer = styled.div`
  width: 100vw;
  height: 100vh;
  background: #1E2A38;
  display: flex;
  opacity: ${props => props.visible ? 1 : 0};
  transition: opacity 0.5s ease-in-out;
  position: fixed;
  top: 0;
  left: 0;
`;

const TreeContainer = styled.div`
  width: 60%;
  height: 100vh;
  position: relative;
  background: #1E2A38;

  .react-flow {
    width: 100%;
    height: 100%;
    background: #1E2A38;
  }

  .react-flow__container {
    width: 100%;
    height: 100%;
  }
`;

const FlowWrapper = styled.div`
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
`;

const ScanningPanel = styled.div`
  width: 40%;
  height: 100%;
  background: #16202C;
  border-left: 2px solid #00ADB5;
  padding: 24px;
  color: #E0E0E0;
  font-family: 'Courier New', monospace;
  overflow-y: auto;
`;

const ScanningTitle = styled.h2`
  color: #E0E0E0;
  margin-bottom: 20px;
  font-size: 1.5rem;
`;

const VulnerabilityBox = styled.div`
  border: 2px solid #FFD700;
  border-radius: 12px;
  padding: 20px;
  margin-bottom: 20px;
  transition: all 0.3s ease;
  background: rgba(231, 76, 60, 0.1);
  display: flex;
  gap: 16px;

  &:hover {
    transform: translateY(-3px);
    box-shadow: 0 6px 12px rgba(255, 215, 0, 0.15);
  }
`;

const WarningIcon = styled.div`
  color: #E74C3C;
  font-size: 24px;
  flex-shrink: 0;
  display: flex;
  align-items: flex-start;
  padding-top: 4px;
`;

const VulnerabilityContent = styled.div`
  flex-grow: 1;
`;

const VulnerabilityTitle = styled.h3`
  color: #FFD700;
  margin: 0 0 12px 0;
  font-size: 1.2rem;
  font-weight: bold;
  letter-spacing: 0.5px;
  display: flex;
  align-items: center;
  gap: 8px;

  &:after {
    content: 'HIGH';
    font-size: 0.7rem;
    background: #E74C3C;
    color: white;
    padding: 2px 6px;
    border-radius: 4px;
    letter-spacing: 1px;
  }
`;

const VulnerabilityDescription = styled.p`
  color: #B8C2CC;
  margin: 0;
  font-size: 1rem;
  line-height: 1.5;
`;

const VulnerabilityStats = styled.div`
  display: flex;
  gap: 8px;
  margin-top: 8px;
  font-size: 0.9rem;
`;

const StatItem = styled.span`
  color: ${props => props.color || '#B8C2CC'};
  background: rgba(231, 76, 60, 0.2);
  padding: 2px 8px;
  border-radius: 4px;
  display: flex;
  align-items: center;
  gap: 4px;
`;

const SecurityFindings = styled.div`
  margin-top: 32px;
`;

const FindingsTitle = styled.h3`
  color: #FFD700;
  margin-bottom: 24px;
  font-size: 1.8rem;
  text-transform: uppercase;
  letter-spacing: 1px;
  text-align: center;
  position: relative;
  padding-bottom: 16px;

  &:after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 60px;
    height: 3px;
    background: #FFD700;
  }
`;

const TargetInfo = styled.div`
  background: rgba(255, 215, 0, 0.1);
  border-radius: 8px;
  padding: 12px 16px;
  margin-bottom: 24px;
  border: 1px solid rgba(255, 215, 0, 0.3);

  p {
    color: #FFD700;
    margin: 0;
    font-size: 1.1rem;
    font-weight: bold;
  }
`;

const AnimatedEllipsis = styled.span`
  @keyframes ellipsis {
    0% { content: ''; }
    25% { content: '.'; }
    50% { content: '..'; }
    75% { content: '...'; }
    100% { content: ''; }
  }

  &::after {
    content: '';
    animation: ellipsis 1s infinite;
  }
`;

const vulnerabilityData = [
  {
    title: "SQL Injection Vulnerability",
    description: "Unsanitized user input in database queries could allow malicious SQL code execution. This poses a risk of unauthorized data access or manipulation.",
    impact: "Critical",
    confidence: "High",
    category: "Injection"
  },
  {
    title: "Weak Password Policy",
    description: "Current password requirements do not meet security standards. Passwords may be vulnerable to brute force or dictionary attacks.",
    impact: "High",
    confidence: "High",
    category: "Authentication"
  },
  {
    title: "Outdated SSL Certificate",
    description: "SSL certificate is using an outdated protocol version. This may expose the system to known security vulnerabilities.",
    impact: "High",
    confidence: "High",
    category: "Encryption"
  },
  {
    title: "Cross-Site Scripting (XSS)",
    description: "Unvalidated user input is rendered directly in the browser, potentially allowing injection of malicious scripts.",
    impact: "Critical",
    confidence: "High",
    category: "Injection"
  },
  {
    title: "Insecure Direct Object References",
    description: "API endpoints lack proper access control, allowing potential unauthorized access to resources through ID manipulation.",
    impact: "High",
    confidence: "High",
    category: "Access Control"
  }
];

const VulnerabilityScanPage = ({ treeData, visible = true }) => {
  const [hoveredNode, setHoveredNode] = useState(null);
  const [nodes, setNodes] = useState([]);
  const [edges, setEdges] = useState([]);

  useEffect(() => {
    if (treeData && treeData.nodes && treeData.edges) {
      // Scale the positions of nodes
      const scaledNodes = treeData.nodes.map(node => ({
        ...node,
        position: {
          x: node.position.x * 0.6,
          y: node.position.y * 0.6
        },
        draggable: true
      }));
      setNodes(scaledNodes);
      setEdges(treeData.edges);
    }
  }, [treeData]);


  const onNodeMouseEnter = (_, node) => {
    setHoveredNode(node);
    setNodes(nds =>
      nds.map(n => ({
        ...n,
        style: {
          ...n.style,
          background: n.id === node.id ? '#E74C3C' : n.style.background,
          transition: 'background-color 0.3s ease-in-out'
        }
      }))
    );
  };

  const onNodeMouseLeave = () => {
    setHoveredNode(null);
    setNodes(nds =>
      nds.map(n => ({
        ...n,
        style: {
          ...n.style,
          background: n.data.type === 'root' ? '#1a2634' : '#16202C',
          transition: 'background-color 0.3s ease-in-out'
        }
      }))
    );
  };

  const onNodesChange = (changes) => {
    setNodes((nds) => {
      return changes.reduce((acc, change) => {
        if (change.type === 'position' && change.dragging) {
          return acc.map((node) => {
            if (node.id === change.id) {
              return {
                ...node,
                position: change.position
              };
            }
            return node;
          });
        }
        return acc;
      }, nds);
    });
  };

  return (
    <PageContainer visible={visible}>
      <TreeContainer>
        <FlowWrapper>
          <ReactFlow
            nodes={nodes}
            edges={edges}
            onNodeMouseEnter={onNodeMouseEnter}
            onNodeMouseLeave={onNodeMouseLeave}
            onNodesChange={onNodesChange}
            nodesDraggable={true}
            nodesConnectable={false}
            elementsSelectable={true}
            fitView
            fitViewOptions={{
              padding: 0.2,
              includeHiddenNodes: true,
              minZoom: 0.5,
              maxZoom: 1.5
            }}
            defaultEdgeOptions={{
              type: 'smoothstep',
              animated: true,
              style: { strokeWidth: 2 }
            }}
            minZoom={0.1}
            maxZoom={1.5}
            defaultViewport={{ x: 0, y: 0, zoom: 1 }}
          >
            <Background
              gap={12}
              size={1}
              color="#304254"
            />
          </ReactFlow>
        </FlowWrapper>
      </TreeContainer>
      <ScanningPanel>
        <ScanningTitle>
          {hoveredNode
            ? "Scanning vulnerabilities"
            : "Hover over a node to begin scanning..."}
          {hoveredNode && <AnimatedEllipsis />}
        </ScanningTitle>

        {hoveredNode && (
          <>
            <TargetInfo>
              <p>Target: {hoveredNode.data.label}</p>
            </TargetInfo>

            <SecurityFindings>
              <FindingsTitle>Security Findings</FindingsTitle>
              {vulnerabilityData.map((vuln, index) => (
                <VulnerabilityBox key={index}>
                  <WarningIcon>‚ö†Ô∏è</WarningIcon>
                  <VulnerabilityContent>
                    <VulnerabilityTitle>{vuln.title}</VulnerabilityTitle>
                    <VulnerabilityDescription>{vuln.description}</VulnerabilityDescription>
                    <VulnerabilityStats>
                      <StatItem color="#E74C3C">üéØ {vuln.impact}</StatItem>
                      <StatItem>‚úì {vuln.confidence}</StatItem>
                      <StatItem>üîç {vuln.category}</StatItem>
                    </VulnerabilityStats>
                  </VulnerabilityContent>
                </VulnerabilityBox>
              ))}
            </SecurityFindings>
          </>
        )}
      </ScanningPanel>
    </PageContainer>
  );
};

export default VulnerabilityScanPage;
